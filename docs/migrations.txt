
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."create_profile"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$ BEGIN INSERT INTO profiles (email, name) VALUES (NEW.email, NEW.name); RETURN NEW; END; $$;

ALTER FUNCTION "public"."create_profile"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."user_profile_create"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$ 
begin 
  insert into public.profiles (id, email) 
  values (new.id, new.email); 
  return new; 
end; 
$$;

ALTER FUNCTION "public"."user_profile_create"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."org_project" (
    "org_id" bigint NOT NULL,
    "project_id" bigint NOT NULL
);

ALTER TABLE "public"."org_project" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."organisations" (
    "org_id" bigint NOT NULL,
    "org_name" character varying(255) NOT NULL,
    "created_at" time without time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."organisations" OWNER TO "postgres";

ALTER TABLE "public"."organisations" ALTER COLUMN "org_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."organisations_org_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "first_name" character varying,
    "last_name" character varying,
    "email" character varying,
    "created_at" timestamp without time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."projects" (
    "project_id" bigint NOT NULL,
    "project_name" character varying(255) NOT NULL,
    "text" "text"
);

ALTER TABLE "public"."projects" OWNER TO "postgres";

ALTER TABLE "public"."projects" ALTER COLUMN "project_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."projects_project_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."roles" (
    "id" bigint NOT NULL,
    "key" character varying NOT NULL,
    "title" character varying NOT NULL
);

ALTER TABLE "public"."roles" OWNER TO "postgres";

ALTER TABLE "public"."roles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."roles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

INSERT INTO "public"."roles"(key, title) VALUES ('ORG_CONTRIBUTOR','Contributor');
INSERT INTO "public"."roles"(key, title) VALUES ('ORG_VIEWER','Viewer');

CREATE TABLE IF NOT EXISTS "public"."user_organisation" (
    "user_id" "uuid" NOT NULL,
    "org_id" bigint NOT NULL,
    "role" bigint
);

ALTER TABLE "public"."user_organisation" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user_project" (
    "project_id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "is_private" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."user_project" OWNER TO "postgres";

ALTER TABLE ONLY "public"."org_project"
    ADD CONSTRAINT "org_project_pkey" PRIMARY KEY ("org_id", "project_id");

ALTER TABLE ONLY "public"."organisations"
    ADD CONSTRAINT "organisations_pkey" PRIMARY KEY ("org_id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."projects"
    ADD CONSTRAINT "projects_pkey" PRIMARY KEY ("project_id");

ALTER TABLE ONLY "public"."roles"
    ADD CONSTRAINT "roles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_organisation"
    ADD CONSTRAINT "user_organisation_pkey" PRIMARY KEY ("user_id", "org_id");

ALTER TABLE ONLY "public"."user_project"
    ADD CONSTRAINT "user_project_pkey" PRIMARY KEY ("project_id", "user_id");

ALTER TABLE ONLY "public"."org_project"
    ADD CONSTRAINT "org_project_org_id_fkey" FOREIGN KEY ("org_id") REFERENCES "public"."organisations"("org_id");

ALTER TABLE ONLY "public"."org_project"
    ADD CONSTRAINT "org_project_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "public"."projects"("project_id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_organisation"
    ADD CONSTRAINT "user_organisation_org_id_fkey" FOREIGN KEY ("org_id") REFERENCES "public"."organisations"("org_id");

ALTER TABLE ONLY "public"."user_organisation"
    ADD CONSTRAINT "user_organisation_role_fkey" FOREIGN KEY ("role") REFERENCES "public"."roles"("id") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY "public"."user_organisation"
    ADD CONSTRAINT "user_organisation_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_project"
    ADD CONSTRAINT "user_project_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "public"."projects"("project_id");

ALTER TABLE ONLY "public"."user_project"
    ADD CONSTRAINT "user_project_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable read access for all users" ON "public"."org_project" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."roles" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."user_project" FOR SELECT USING (true);

CREATE POLICY "Enable select for users based on user_id" ON "public"."organisations" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM "public"."user_organisation" "uo"
  WHERE (("uo"."org_id" = "organisations"."org_id") AND ("uo"."user_id" = "auth"."uid"())))));

CREATE POLICY "Enable select for users, if user is part of organisation" ON "public"."user_organisation" FOR SELECT USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable select if user in Organisations project with view role" ON "public"."projects" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM (("public"."user_organisation" "uo"
     JOIN "public"."org_project" "op" ON (("uo"."org_id" = "op"."org_id")))
     JOIN "public"."roles" "r" ON (("uo"."role" = "r"."id")))
  WHERE (("op"."project_id" = "projects"."project_id") AND ("uo"."user_id" = "auth"."uid"()) AND (("r"."key")::"text" = ANY ((ARRAY['ORG_CONTRIBUTOR'::character varying, 'ORG_VIEWER'::character varying])::"text"[]))))));

CREATE POLICY "Enable update for users based on roles" ON "public"."projects" FOR UPDATE USING ((EXISTS ( SELECT 1
   FROM (("public"."user_organisation" "uo"
     JOIN "public"."org_project" "op" ON (("uo"."org_id" = "op"."org_id")))
     JOIN "public"."roles" "r" ON (("uo"."role" = "r"."id")))
  WHERE (("op"."project_id" = "projects"."project_id") AND ("uo"."user_id" = "auth"."uid"()) AND (("r"."key")::"text" = 'ORG_CONTRIBUTOR'::"text"))))) WITH CHECK ((EXISTS ( SELECT 1
   FROM (("public"."user_organisation" "uo"
     JOIN "public"."org_project" "op" ON (("uo"."org_id" = "op"."org_id")))
     JOIN "public"."roles" "r" ON (("uo"."role" = "r"."id")))
  WHERE (("op"."project_id" = "projects"."project_id") AND ("uo"."user_id" = "auth"."uid"()) AND (("r"."key")::"text" = 'ORG_CONTRIBUTOR'::"text")))));

ALTER TABLE "public"."org_project" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."organisations" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."projects" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."roles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_organisation" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_project" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."create_profile"() TO "anon";
GRANT ALL ON FUNCTION "public"."create_profile"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_profile"() TO "service_role";

GRANT ALL ON FUNCTION "public"."user_profile_create"() TO "anon";
GRANT ALL ON FUNCTION "public"."user_profile_create"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."user_profile_create"() TO "service_role";

GRANT ALL ON TABLE "public"."org_project" TO "anon";
GRANT ALL ON TABLE "public"."org_project" TO "authenticated";
GRANT ALL ON TABLE "public"."org_project" TO "service_role";

GRANT ALL ON TABLE "public"."organisations" TO "anon";
GRANT ALL ON TABLE "public"."organisations" TO "authenticated";
GRANT ALL ON TABLE "public"."organisations" TO "service_role";

GRANT ALL ON SEQUENCE "public"."organisations_org_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."organisations_org_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."organisations_org_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."projects" TO "anon";
GRANT ALL ON TABLE "public"."projects" TO "authenticated";
GRANT ALL ON TABLE "public"."projects" TO "service_role";

GRANT ALL ON SEQUENCE "public"."projects_project_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."projects_project_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."projects_project_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."roles" TO "anon";
GRANT ALL ON TABLE "public"."roles" TO "authenticated";
GRANT ALL ON TABLE "public"."roles" TO "service_role";

GRANT ALL ON SEQUENCE "public"."roles_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."roles_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."roles_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_organisation" TO "anon";
GRANT ALL ON TABLE "public"."user_organisation" TO "authenticated";
GRANT ALL ON TABLE "public"."user_organisation" TO "service_role";

GRANT ALL ON TABLE "public"."user_project" TO "anon";
GRANT ALL ON TABLE "public"."user_project" TO "authenticated";
GRANT ALL ON TABLE "public"."user_project" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
